#
# WMFS2 configuration file
#

# vim: set tabstop=2:softtabstop=2:shiftwidth=2:expandtab

@include "~/.config/wmfs/themes"

[bars]

  # Position:
  #
  # 0  Top
  # 1  Bottom
  # 2  Hide

  # Element type:
  #
  # t  Tags
  # s  Statustext (will take available space)
  # y  Systray (can be set only ONE time among all element)
  # l  Launcher (will be expended at launcher use)

  [bar]
     position = 0
     screen = 0
     elements = "tlsy"   # element order in bar
     theme = "grayblue"
  [/bar]

# [bar]
#    position = 0
#    screen = 1
#    elements = "ts"
#    theme = "default"
# [/bar]

[/bars]

[tags]

  # Tag wrapping navigation
  circular = false

  # Use no screen option or screen = -1 to set tag on each screen
#  [tag]
#      screen = -1
#      name = "1"
#      # statusline=""
#  [/tag]

  [tag] name = "1" [/tag]
  [tag] name = "2" [/tag]
  [tag] name = "3" [/tag]
  [tag] name = "4" [/tag]
  [tag] name = "5" [/tag]
  [tag] name = "6" [/tag]
  [tag] name = "7" [/tag]
  [tag] name = "8" [/tag]
  [tag] name = "9" [/tag]
  [tag] name = "10" [/tag]
  [tag] name = "11" [/tag]
  [tag] name = "12" [/tag]
  [tag] name = "13" [/tag]
  [tag] name = "14" [/tag]
  [tag] name = "15" [/tag]
#  [tag] name = "16" [/tag]
#  [tag] name = "17" [/tag]
#  [tag] name = "18" [/tag]
#  [tag] name = "19" [/tag]
#  [tag] name = "20" [/tag]
#  [tag] name = "21" [/tag]
#  [tag] name = "22" [/tag]

  # Mousebinds associated to Tags element button
  [mouse] button = "1" func = "tag_click" [/mouse]
  [mouse] button = "4" func = "tag_next"  [/mouse]
  [mouse] button = "5" func = "tag_prev"  [/mouse]


[/tags]

[client]

  # Padding between clients (default: 0) :
  #padding = 75

  # Give focus to new created client (default = false)
  autofocus = true

  theme = "grayblue"
  key_modifier = "Super"

  # Focus type:
  #  enter : focus follow mouse (default)
  #  click : click to focus
  #  everything-else : disable mouse focus support
  focus = enter

  [mouse] button = "1" func = "client_focus_click"    [/mouse]
  [mouse] button = "1" func = "mouse_swap"            [/mouse]
  [mouse] button = "2" func = "mouse_tab"             [/mouse]
  [mouse] button = "3" func = "mouse_resize"          [/mouse]
  [mouse] button = "4" func = "client_focus_next_tab" [/mouse]
  [mouse] button = "5" func = "client_focus_prev_tab" [/mouse]

[/client]

[rules]

  [rule]
    instance = "xv"
    free = true
  [/rule]

  [rule]
    instance = "chromium"
    tag    = 0
    screen = 0
    tab        = true
  [/rule]

  [rule]
    instance = "qpdfview"
    tag    = 0
    screen = 0
    tab        = true
  [/rule]

  [rule]
    instance = "dwb"
    tag    = 0
    screen = 0
    free   = false
    tab    = false
    ignore_tag = false
  [/rule]

  [rule]
    instance = "Pidgin"
    tag = 10
  [/rule]

  [rule]
    instance = "pinentry"
    free     = true
    ignore_tag = true
  [/rule]

[/rules]

[launchers]

  # command can be an uicb function or an uicb function + extension (see example)
  [launcher]
     name = "exec"
     prompt = "Run:"

     # Example of uicb + ext:
     #   command = "spawn xterm -e"
     command = "spawn"

     width = 150
  [/launcher]

[/launchers]

[keys]

  [key] mod = {"Super"} key = "Return" func = "spawn" cmd = "tinyterm" [/key]

  [key] mod = {"Control", "Alt"} key = "q" func = "quit" [/key]
  [key] mod = {"Control", "Alt"} key = "r" func = "reload" [/key]
  [key] mod = {"Control", "Alt"} key = "i" func = "spawn" cmd = "initscreen.sh" [/key]

  # Tag manipulation
  [key] mod = {"Super"} key = "plus"    func = "tag_set" cmd = "0"  [/key]
  [key] mod = {"Super"} key = "ecaron"  func = "tag_set" cmd = "1"  [/key]
  [key] mod = {"Super"} key = "scaron"  func = "tag_set" cmd = "2"  [/key]
  [key] mod = {"Super"} key = "ccaron"  func = "tag_set" cmd = "3"  [/key]
  [key] mod = {"Super"} key = "rcaron"  func = "tag_set" cmd = "4"  [/key]
  [key] mod = {"Super"} key = "zcaron"  func = "tag_set" cmd = "5"  [/key]
  [key] mod = {"Super"} key = "yacute"  func = "tag_set" cmd = "6"  [/key]
  [key] mod = {"Super"} key = "aacute"  func = "tag_set" cmd = "7"  [/key]
  [key] mod = {"Super"} key = "iacute"  func = "tag_set" cmd = "8"  [/key]
  [key] mod = {"Super"} key = "eacute"  func = "tag_set" cmd = "9"  [/key]
  [key] mod = {"Super"} key = "F1"      func = "tag_set" cmd = "10" [/key]
  [key] mod = {"Super"} key = "F2"      func = "tag_set" cmd = "11" [/key]
  [key] mod = {"Super"} key = "F3"      func = "tag_set" cmd = "12" [/key]
  [key] mod = {"Super"} key = "F4"      func = "tag_set" cmd = "13" [/key]
  [key] mod = {"Super"} key = "F5"      func = "tag_set" cmd = "14" [/key]
  [key] mod = {"Super"} key = "F6"      func = "tag_set" cmd = "15" [/key]
  [key] mod = {"Super"} key = "F7"      func = "tag_set" cmd = "16" [/key]
  [key] mod = {"Super"} key = "F8"      func = "tag_set" cmd = "17" [/key]
  [key] mod = {"Super"} key = "F9"      func = "tag_set" cmd = "18" [/key]
  [key] mod = {"Super"} key = "F10"     func = "tag_set" cmd = "19" [/key]
  [key] mod = {"Super"} key = "F11"     func = "tag_set" cmd = "20" [/key]
  [key] mod = {"Super"} key = "F12"     func = "tag_set" cmd = "21" [/key]

  [key] mod = {"Super", "Shift"} key = "plus"    func = "tag_client" cmd = "0"  [/key]
  [key] mod = {"Super", "Shift"} key = "ecaron"  func = "tag_client" cmd = "1"  [/key]
  [key] mod = {"Super", "Shift"} key = "scaron"  func = "tag_client" cmd = "2"  [/key]
  [key] mod = {"Super", "Shift"} key = "ccaron"  func = "tag_client" cmd = "3"  [/key]
  [key] mod = {"Super", "Shift"} key = "rcaron"  func = "tag_client" cmd = "4"  [/key]
  [key] mod = {"Super", "Shift"} key = "zcaron"  func = "tag_client" cmd = "5"  [/key]
  [key] mod = {"Super", "Shift"} key = "yacute"  func = "tag_client" cmd = "6"  [/key]
  [key] mod = {"Super", "Shift"} key = "aacute"  func = "tag_client" cmd = "7"  [/key]
  [key] mod = {"Super", "Shift"} key = "iacute"  func = "tag_client" cmd = "8"  [/key]
  [key] mod = {"Super", "Shift"} key = "eacute"  func = "tag_client" cmd = "9"  [/key]
  [key] mod = {"Super", "Shift"} key = "F1"      func = "tag_client" cmd = "10" [/key]
  [key] mod = {"Super", "Shift"} key = "F2"      func = "tag_client" cmd = "11" [/key]
  [key] mod = {"Super", "Shift"} key = "F3"      func = "tag_client" cmd = "12" [/key]
  [key] mod = {"Super", "Shift"} key = "F4"      func = "tag_client" cmd = "13" [/key]
  [key] mod = {"Super", "Shift"} key = "F5"      func = "tag_client" cmd = "14" [/key]
  [key] mod = {"Super", "Shift"} key = "F6"      func = "tag_client" cmd = "15" [/key]
  [key] mod = {"Super", "Shift"} key = "F7"      func = "tag_client" cmd = "16" [/key]
  [key] mod = {"Super", "Shift"} key = "F8"      func = "tag_client" cmd = "17" [/key]
  [key] mod = {"Super", "Shift"} key = "F9"      func = "tag_client" cmd = "18" [/key]
  [key] mod = {"Super", "Shift"} key = "F10"     func = "tag_client" cmd = "19" [/key]
  [key] mod = {"Super", "Shift"} key = "F11"     func = "tag_client" cmd = "20" [/key]
  [key] mod = {"Super", "Shift"} key = "F12"     func = "tag_client" cmd = "21" [/key]

  [key] mod = {"Super"} key = "minus" func = "tag_del" [/key]
  [key] mod = {"Super", "Shift"} key = "minus" func = "tag_new" [/key]

  # tag function: cmd = nameofthetag
  #[key] mod = {"Super"} key = "z" func = "tag" cmd = "2" [/key]

  [key] mod = {"Super"} key = "l" func = "tag_next" [/key]
  [key] mod = {"Super"} key = "h"  func = "tag_prev" [/key]

  [key] mod = {"Super"} key = "k"  func = "screen_next" [/key]
  [key] mod = {"Super"} key = "j" func = "screen_prev" [/key]

  [key] mod = {"Super", "Shift"} key = "q" func = "client_close" [/key]

  # Focus next / prev client and next / prev tabbed client
  [key] mod = { "Alt" }            key = "Tab" func = "client_focus_next" [/key]
  [key] mod = { "Alt", "Shift" }   key = "Tab" func = "client_focus_prev" [/key]
  [key] mod = { "Super" }          key = "Tab" func = "client_focus_next_tab" [/key]
  [key] mod = { "Super", "Shift" } key = "Tab" func = "client_focus_prev_tab" [/key]

  # Focus next client with direction
  [key] mod = {"Alt"} key = "h" func = "client_focus_left"   [/key]
  [key] mod = {"Alt"} key = "l" func = "client_focus_right"  [/key]
  [key] mod = {"Alt"} key = "k" func = "client_focus_top"    [/key]
  [key] mod = {"Alt"} key = "j" func = "client_focus_bottom" [/key]

  # swap next client with direction:
  [key] mod = {"Alt", "Shift"} key = "h" func = "client_swap_left"   [/key]
  [key] mod = {"Alt", "Shift"} key = "l" func = "client_swap_right"  [/key]
  [key] mod = {"Alt", "Shift"} key = "k" func = "client_swap_top"    [/key]
  [key] mod = {"Alt", "Shift"} key = "j" func = "client_swap_bottom" [/key]

  # Resize selected tiled client with direction
  [key] mod = {"Control", "Shift"} key = "h" func = "client_resize_left"   cmd = "20" [/key]
  [key] mod = {"Control", "Shift"} key = "l" func = "client_resize_left"   cmd = "-20" [/key]
  [key] mod = {"Control", "Shift"} key = "k" func = "client_resize_top"    cmd = "20" [/key]
  [key] mod = {"Control", "Shift"} key = "j" func = "client_resize_top"    cmd = "-20" [/key]
  [key] mod = {"Control", "Super"} key = "h" func = "client_resize_right"  cmd = "-20" [/key]
  [key] mod = {"Control", "Super"} key = "l" func = "client_resize_right"  cmd = "20" [/key]
  [key] mod = {"Control", "Super"} key = "k" func = "client_resize_bottom" cmd = "-20" [/key]
  [key] mod = {"Control", "Super"} key = "j" func = "client_resize_bottom" cmd = "20" [/key]

  # Tabbing command
  [key] mod = {"Super", "Shift"} key = "h" func = "client_tab_left"   [/key]
  [key] mod = {"Super", "Shift"} key = "l" func = "client_tab_right"  [/key]
  [key] mod = {"Super", "Shift"} key = "k" func = "client_tab_top"    [/key]
  [key] mod = {"Super", "Shift"} key = "j" func = "client_tab_bottom" [/key]
  [key] mod = {"Super", "Shift"} key = "u" func = "client_untab" [/key]
  [key] mod = {"Super"}          key = "t" func = "client_tab_next_opened" [/key]

  # Layout manipulation
  [key] mod = {"Super"}          key = "m" func = "layout_vmirror" [/key]
  [key] mod = {"Super", "Shift"} key = "m" func = "layout_hmirror" [/key]
  [key] mod = {"Super"}          key = "r" func = "layout_rotate_right" [/key]
  [key] mod = {"Super", "Shift"} key = "r" func = "layout_rotate_left" [/key]

  [key] mod = {"Control", "Super", "Alt"} key = "h" func = "layout_integrate_left" [/key]
  [key] mod = {"Control", "Super", "Alt"} key = "j" func = "layout_integrate_bottom" [/key]
  [key] mod = {"Control", "Super", "Alt"} key = "k" func = "layout_integrate_top" [/key]
  [key] mod = {"Control", "Super", "Alt"} key = "l" func = "layout_integrate_right" [/key]

  # Layout set historic travelling function (TESTING)
  [key] mod = {"Super"} key = "o" func = "layout_prev_set" [/key]
  [key] mod = {"Super", "Shift"} key = "o" func = "layout_next_set" [/key]

  # Toggle client free/tile
  [key] mod = {"Super"} key = "f" func = "client_toggle_free" [/key]

  # Toggle client ignore_tag
  [key] mod = {"Super", "Shift"} key = "f" func = "client_toggle_ignore_tag" [/key]

  # Toggle infobar visibility
  [key] mod = {"Super"} key = "b" func = "infobar_toggle_hide" cmd = "default" [/key]

  # Launcher
  [key] mod = {"Super"} key = "p" func = "launcher" cmd = "exec" [/key]

  # Multimedia keys
  [key] mod = {} key = "XF86AudioRaiseVolume" func = "spawn" cmd = "ponymix unmute > /dev/null && ponymix increase 5 > /dev/null" [/key]
  [key] mod = {} key = "XF86AudioLowerVolume" func = "spawn" cmd = "ponymix unmute > /dev/null && ponymix decrease 5 > /dev/null" [/key]
  [key] mod = {} key = "XF86AudioMute" func = "spawn" cmd = "ponymix mute > /dev/null" [/key]

  [key] mod = {} key = "XF86AudioPlay" func = "spawn" cmd = "mpc -q toggle" [/key]
  [key] mod = {} key = "XF86AudioStop" func = "spawn" cmd = "mpc -q stop" [/key]
  [key] mod = {} key = "XF86AudioPrev" func = "spawn" cmd = "mpc -q prev" [/key]
  [key] mod = {} key = "XF86AudioNext" func = "spawn" cmd = "mpc -q next" [/key]
  [key] mod = {"Control", "Alt"} key = "Up"    func = "spawn" cmd = "mpc -q stop" [/key]
  [key] mod = {"Control", "Alt"} key = "Down"  func = "spawn" cmd = "mpc -q toggle" [/key]
  [key] mod = {"Control", "Alt"} key = "Left"  func = "spawn" cmd = "mpc -q prev" [/key]
  [key] mod = {"Control", "Alt"} key = "Right" func = "spawn" cmd = "mpc -q next" [/key]

  [key] mod = {} key = "XF86MonBrightnessUp" func = "spawn" cmd = "display-brightness-notify.py" [/key]
  [key] mod = {} key = "XF86MonBrightnessDown" func = "spawn" cmd = "display-brightness-notify.py" [/key]

  [key] mod = {} key = "XF86ScreenSaver" func = "spawn" cmd = "sxlock" [/key]

  [key] mod = {} key = "XF86WWW" func = "spawn" cmd = "toggle-touchpad.sh" [/key]

[/keys]
