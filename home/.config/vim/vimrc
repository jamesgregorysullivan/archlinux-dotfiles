set nocompatible
set ttyfast

" Tabs, Spaces and Indentation
set expandtab                           " use spaces for tabs
set tabstop=4                           " number of spaces to use for tabs
set shiftwidth=4                        " number of spaces to autoindent
set softtabstop=4                       " number of spaces for a tab
set autoindent                          " set autoindenting on
set smartindent                         " automatically insert another level of indent when needed
set backspace=indent,eol,start          " more flexible backspace
retab                                   " spaces instead of tabs

" Backup
set nobackup                            " don't backup files
set nowritebackup
set noswapfile

" Searching
set hlsearch                            " highlight search terms
set incsearch                           " show search matches as you type
set ignorecase                          " ignore case when searching
set smartcase                           " make searches case sensitive only if they contain uppercase stuff

" Encoding
set encoding=utf-8                      " use utf-8 everywhere
set fileencoding=utf-8                  " use utf-8 everywhere
set termencoding=utf-8                  " use utf-8 everywhere

" Various
set ruler                               " show the cursor position
set scrolloff=5                         " show 5 lines above/below the cursor when scrolling
set number                              " show numbers
set showcmd                             " shows the command in the last line of the screen
set autoread                            " read files when they've been changed outside of Vim
set showmatch                           " matching brackets & the like

set history=500                         " number of command lines stored in the history tables
set undolevels=500                      " number of levels of undo

set splitright                          " open new vertical split windows to the right of the current one, not the left
set splitbelow                          " same as above - opens new windows below, not above
set wildmode=longest,list               " file and directory matching mode
set nrformats=hex                       " allow incrementing and decrementing numbers that start with 0 using <c-a> and <c-x>
set clipboard=unnamedplus,autoselect    " use + register (X Window clipboard) as unnamed register"
set viminfo='20,<1000,s10,h             " large registers (for copying between sessions)

set guifont=Monospace\ 9                " font in gvim

" Environment
"set directory=$XDG_CACHE_HOME/vim,~/,/tmp
"set backupdir=$XDG_CACHE_HOME/vim,~/,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after

filetype plugin on                      " load file type plugins
filetype indent on                      " load file type based indentation
" syntax highlighting only when not in vimdiff
if !&diff
    syntax on
endif


" colorscheme
if &t_Co < 256
    colorscheme desert                  " colorscheme for the 8 color linux term
else
    let g:solarized_termcolors=256
    if has('gui_running')
        set background=light
    else
        set background=dark
    endif
    colorscheme solarized
endif


" Map keys to toggle functions
function! MapToggle(key, opt)
    let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
    exec 'nnoremap '.a:key.' '.cmd
    exec 'inoremap '.a:key." \<C-O>".cmd
endfunction
command! -nargs=+ MapToggle call MapToggle(<f-args>)

" Keys & functions
MapToggle <F4> number
MapToggle <F5> spell
MapToggle <F6> paste
MapToggle <F7> hlsearch
MapToggle <F8> wrap

" Map F1 to Esc instead of the stupid help crap
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" space bar un-highligts search
:noremap <silent> <Space> :silent noh<Bar>echo<CR>

" Make a curly brace automatically insert an indented line
inoremap {<CR> {<CR>}<Esc>O<BS><Tab>

" Make jj exit insert mode (since it's almost never typed normally)
imap jj <Esc>:w<CR>
imap kk <Esc>:w<CR>

" map Ctrl+m to :make
map <C-m> :w<CR>:make<CR>

" Comment out a range of lines (default settings)
map - :s/^/\#/<CR>:nohlsearch<CR>

" Tab navigation
nnoremap <C-h> :tabprevious<CR>
nnoremap <C-l> :tabnext<CR>
nnoremap <C-p> :tabprevious<CR>
nnoremap <C-n> :tabnext<CR>
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
nnoremap <silent> <C-S-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> <C-S-Right> :execute 'silent! tabmove ' . tabpagenr()<CR>


" automatic absolute/relative numbers toggling
"set relativenumber
"autocmd InsertEnter * :set number
"autocmd InsertLeave * :set relativenumber

" Comment out a range of lines (per-language settings)
autocmd FileType tex    map - :s/^/\%/<CR>:nohlsearch<CR>
autocmd FileType vim    map - :s/^/\"/<CR>:nohlsearch<CR>
autocmd FileType c,cpp  map - :s/^/\/\//<CR>:nohlsearch<CR>
autocmd FileType lua    map - :s/^/--/<CR>:nohlsearch<CR>
autocmd FileType javascript map - :s/^/\/\//<CR>:nohlsearch<CR>
autocmd FileType haskell map - :s/^/--/<CR>:nohlsearch<CR>

" Clear all comment markers (one rule for all languages)
map _ :s/^\/\/\\|^--\\|^> \\|^[#"%!;]//<CR>:nohlsearch<CR>

" Removes trailing whitespace
function TrimWhiteSpace()
    %s/\s\+$//e
endfunction
map <F2> :call TrimWhiteSpace()<CR>

" I use custom Makefile for LaTeX (and gnuplot)
autocmd FileType tex,gnuplot    set makeprg=make\ -j2\ pdf\ nocolor=1

" Automatic hard-wrapping for *.tex files
autocmd FileType tex set textwidth=110

" Highlight first column after 'textwidth'
autocmd FileType tex set colorcolumn=+1
autocmd FileType tex highlight ColorColumn ctermbg=darkgrey guibg=lightgrey

" spell checking
set spelllang=en_gb                                     " real English spelling
set dictionary+=/usr/share/dict/words                   " use standard dictionary
set spellfile=$XDG_CONFIG_HOME/vim/spell/en.utf-8.add   " my whitelist
autocmd BufRead *.tex,*.markdown,*.md,*.txt,*.wiki,*.mediawiki set spell
